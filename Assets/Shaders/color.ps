Texture2D diffuseTexture : register(t0);
Texture2D specularTexture : register(t1);
SamplerState sampleType : register(s0);

struct PointLightData
{
	float4 position;
	float4 color;
};

cbuffer FrameBufferData : register(b0)
{
	matrix viewMatrix;
	matrix projectionMatrix;
	PointLightData pointLight;
	float4 cameraPos;
};

cbuffer MaterialBufferData : register(b2)
{
	float4 materialData;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 normal : NORMAL;
	float4 worldSpacePosition : POSITION0;
	float2 uv : TEXCOORD;
};

static const float ambientStrength = 0.1;

float4 main(PixelInputType input) : SV_TARGET
{
	float4 pixelToLight = normalize(pointLight.position - input.worldSpacePosition);
	float intensity = clamp(dot(normalize(input.normal), pixelToLight),0,1);
	float4 textureColor = diffuseTexture.Sample(sampleType, input.uv);

	float3 ambient = pointLight.color.xyz * ambientStrength;
	float3 diffuse = textureColor.xyz * intensity;

	float specularStrength = specularTexture.Sample(sampleType, input.uv).x;
	float4 pixelToCamera = normalize(cameraPos - input.worldSpacePosition);
	float4 reflectDir = reflect(-pixelToLight, input.normal);
	float spec = pow(max(dot(pixelToCamera, reflectDir), 0.0), materialData.x);
	float3 specular = specularStrength * spec * pointLight.color.xyz * materialData.y;

	return float4(ambient + diffuse + specular, 1.0);
}